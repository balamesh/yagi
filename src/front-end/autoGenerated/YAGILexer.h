/** \file
 *  This C header file was generated by $ANTLR version 3.5.2
 *
 *     -  From the grammar source file : src/front-end/grammar/YAGI.g
 *     -                            On : 2014-07-17 17:55:30
 *     -                 for the lexer : YAGILexerLexer
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer 
YAGILexer

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pYAGILexer, which is returned from a call to YAGILexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 *
 * The methods in pYAGILexer are  as follows:
 *
 *  - 
 void
      pYAGILexer->TOKEN_ACTION(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_ADD_ASSIGN(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_ALL(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_AND(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_ASSIGN(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_CHOOSE(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_CLOSE_PAREN(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_COLON(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_COMMA(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_DO(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_DOMAIN_END(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_DOMAIN_START(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_DOMAIN_STR(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_EFFECT(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_ELSE(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_END_ACTION(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_END_CHOOSE(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_END_EXO_EVENT(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_END_FOR(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_END_IF(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_END_PICK(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_END_PROC(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_END_SEARCH(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_END_SENSING(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_END_WHILE(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_EOL(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_EQUALS(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_EXISTS(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_EXO_EVENT(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_EXTERNAL(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_FACT(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_FALSE(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_FLUENT(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_FOR_EACH(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_FROM(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_GE(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_GT(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_IF(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_IMPLIES(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_IN(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_INCOMPLETE_KNOWLEDGE(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_LE(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_LT(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_MINUS(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_NEQUALS(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_NOT(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_OPEN_PAREN(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_OR(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_PATTERN_MATCHING(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_PICK(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_PLUS(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_PRECOND(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_PROC(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_REMOVE_ASSIGN(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_SEARCH(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_SENSING(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_SET_END(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_SET_START(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_SIGNAL(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_SUCH(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_TEST(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_THEN(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_TRUE(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_VAR_DECL_START(pYAGILexer)
 *  - 
 void
      pYAGILexer->TOKEN_WHILE(pYAGILexer)
 *  - 
 void
      pYAGILexer->WHITESPACE(pYAGILexer)
 *  - 
 void
      pYAGILexer->ID(pYAGILexer)
 *  - 
 void
      pYAGILexer->STRING(pYAGILexer)
 *  - 
 void
      pYAGILexer->COMMENT(pYAGILexer)
 *  - 
 void
      pYAGILexer->Tokens(pYAGILexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_YAGILexer_H
#define _YAGILexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct YAGILexer_Ctx_struct YAGILexer, * pYAGILexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for 
YAGILexer

 */
struct YAGILexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

     void
     (*mTOKEN_ACTION)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_ADD_ASSIGN)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_ALL)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_AND)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_ASSIGN)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_CHOOSE)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_CLOSE_PAREN)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_COLON)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_COMMA)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_DO)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_DOMAIN_END)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_DOMAIN_START)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_DOMAIN_STR)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_EFFECT)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_ELSE)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_END_ACTION)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_END_CHOOSE)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_END_EXO_EVENT)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_END_FOR)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_END_IF)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_END_PICK)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_END_PROC)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_END_SEARCH)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_END_SENSING)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_END_WHILE)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_EOL)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_EQUALS)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_EXISTS)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_EXO_EVENT)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_EXTERNAL)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_FACT)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_FALSE)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_FLUENT)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_FOR_EACH)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_FROM)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_GE)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_GT)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_IF)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_IMPLIES)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_IN)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_INCOMPLETE_KNOWLEDGE)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_LE)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_LT)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_MINUS)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_NEQUALS)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_NOT)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_OPEN_PAREN)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_OR)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_PATTERN_MATCHING)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_PICK)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_PLUS)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_PRECOND)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_PROC)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_REMOVE_ASSIGN)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_SEARCH)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_SENSING)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_SET_END)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_SET_START)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_SIGNAL)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_SUCH)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_TEST)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_THEN)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_TRUE)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_VAR_DECL_START)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTOKEN_WHILE)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mWHITESPACE)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mID)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mSTRING)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mCOMMENT)	(struct YAGILexer_Ctx_struct * ctx);

     void
     (*mTokens)	(struct YAGILexer_Ctx_struct * ctx);
    const char * (*getGrammarFileName)();
    void            (*reset)  (struct YAGILexer_Ctx_struct * ctx);
    void	    (*free)   (struct YAGILexer_Ctx_struct * ctx);
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pYAGILexer YAGILexerNew         (
pANTLR3_INPUT_STREAM
 instream);
ANTLR3_API pYAGILexer YAGILexerNewSSD      (
pANTLR3_INPUT_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
lexer
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define COMMENT      4
#define ID      5
#define IT_ACTION_DECL      6
#define IT_ADD_ASSIGN      7
#define IT_ALL      8
#define IT_AND      9
#define IT_ASSIGN      10
#define IT_ATOM_SETEXPR      11
#define IT_ATOM_VALEXPR      12
#define IT_BLOCK      13
#define IT_CHOOSE      14
#define IT_CONDITIONAL      15
#define IT_EFFECT      16
#define IT_EQ      17
#define IT_EXISTS      18
#define IT_EXO_EVENT      19
#define IT_EXTERNAL_VARS      20
#define IT_FACT_DECL      21
#define IT_FLUENT_DECL      22
#define IT_FLUENT_QUERY      23
#define IT_FORALL      24
#define IT_FORMULA      25
#define IT_GE      26
#define IT_GT      27
#define IT_IMPLIES      28
#define IT_IN      29
#define IT_LE      30
#define IT_LT      31
#define IT_MINUS      32
#define IT_NEQ      33
#define IT_NOT      34
#define IT_OR      35
#define IT_PICK      36
#define IT_PLUS      37
#define IT_PROC_DECL      38
#define IT_PROC_EXEC      39
#define IT_PROGRAM      40
#define IT_REMOVE_ASSIGN      41
#define IT_SEARCH      42
#define IT_SENSING      43
#define IT_SIGNAL      44
#define IT_STRING_SET      45
#define IT_TEST      46
#define IT_TUPLE      47
#define IT_TUPLE_SET      48
#define IT_VALUE_LIST      49
#define IT_VAR      50
#define IT_VAR_LIST      51
#define IT_WHILE      52
#define STRING      53
#define TOKEN_ACTION      54
#define TOKEN_ADD_ASSIGN      55
#define TOKEN_ALL      56
#define TOKEN_AND      57
#define TOKEN_ASSIGN      58
#define TOKEN_CHOOSE      59
#define TOKEN_CLOSE_PAREN      60
#define TOKEN_COLON      61
#define TOKEN_COMMA      62
#define TOKEN_DO      63
#define TOKEN_DOMAIN_END      64
#define TOKEN_DOMAIN_START      65
#define TOKEN_DOMAIN_STR      66
#define TOKEN_EFFECT      67
#define TOKEN_ELSE      68
#define TOKEN_END_ACTION      69
#define TOKEN_END_CHOOSE      70
#define TOKEN_END_EXO_EVENT      71
#define TOKEN_END_FOR      72
#define TOKEN_END_IF      73
#define TOKEN_END_PICK      74
#define TOKEN_END_PROC      75
#define TOKEN_END_SEARCH      76
#define TOKEN_END_SENSING      77
#define TOKEN_END_WHILE      78
#define TOKEN_EOL      79
#define TOKEN_EQUALS      80
#define TOKEN_EXISTS      81
#define TOKEN_EXO_EVENT      82
#define TOKEN_EXTERNAL      83
#define TOKEN_FACT      84
#define TOKEN_FALSE      85
#define TOKEN_FLUENT      86
#define TOKEN_FOR_EACH      87
#define TOKEN_FROM      88
#define TOKEN_GE      89
#define TOKEN_GT      90
#define TOKEN_IF      91
#define TOKEN_IMPLIES      92
#define TOKEN_IN      93
#define TOKEN_INCOMPLETE_KNOWLEDGE      94
#define TOKEN_LE      95
#define TOKEN_LT      96
#define TOKEN_MINUS      97
#define TOKEN_NEQUALS      98
#define TOKEN_NOT      99
#define TOKEN_OPEN_PAREN      100
#define TOKEN_OR      101
#define TOKEN_PATTERN_MATCHING      102
#define TOKEN_PICK      103
#define TOKEN_PLUS      104
#define TOKEN_PRECOND      105
#define TOKEN_PROC      106
#define TOKEN_REMOVE_ASSIGN      107
#define TOKEN_SEARCH      108
#define TOKEN_SENSING      109
#define TOKEN_SET_END      110
#define TOKEN_SET_START      111
#define TOKEN_SIGNAL      112
#define TOKEN_SUCH      113
#define TOKEN_TEST      114
#define TOKEN_THEN      115
#define TOKEN_TRUE      116
#define TOKEN_VAR_DECL_START      117
#define TOKEN_WHILE      118
#define WHITESPACE      119
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for YAGILexer
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
