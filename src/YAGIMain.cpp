#include <iostream>
#include <cstring>
#include <string>
#include <vector>
#include <assert.h>

#include <memory>

#include "autoGenerated/YAGILexer.h"
#include "autoGenerated/YAGIParser.h"
#include "autoGenerated/YAGITreeWalker.h"
#include "astClasses/YAGICallbackConnector.h"
#include "astClasses/ASTNodeBase.h"

#include "astVisitors/ToStringVisitor.h"

//#pragma GCC diagnostic error "-Wuninitialized"
//    foo(a);         /* error is given for this one */
//#pragma GCC diagnostic push
//#pragma GCC diagnostic ignored "-Wuninitialized"
//    foo(b);         /* no diagnostic for this one */
//#pragma GCC diagnostic pop
//   foo(c);         /* error is given for this one */
//#pragma GCC diagnostic pop
//    foo(d);         /* depends on command line options *

int main(int argc, char * argv[])
{

  YAGICallbackConnector::connectCallbacks();

  pANTLR3_INPUT_STREAM input;
  std::cout << argv[1] << std::endl;
  input = antlr3FileStreamNew((pANTLR3_UINT8) argv[1], ANTLR3_ENC_8BIT);
  assert(input!=NULL);

  //CCallbackConsumer callbackConsumer;

  //Creates the lexer. Doesn't do anything until the parser(or you) tells it to.
  pYAGILexer lxr = YAGILexerNew(input);
  //assert(lxr != NULL);

//Creates an empty token stream.
  pANTLR3_COMMON_TOKEN_STREAM tstream = antlr3CommonTokenStreamSourceNew(
  ANTLR3_SIZE_HINT, TOKENSOURCE(lxr));
  //assert(tstream != NULL);

//Creates a parser.
  pYAGIParser psr = YAGIParserNew(tstream);
  //assert(psr != NULL);

  //Run the parser rule. This also runs the lexer to create the token stream.
  auto langAST = psr->program(psr); //psr->program(psr);
  std::cout << "C AST: " << langAST.tree->toStringTree(langAST.tree)->chars
      << std::endl;

  if (psr->pParser->rec->state->errorCount > 0)
  {
    fprintf(stderr, "The parser returned %d errors, tree walking aborted.\n",
        psr->pParser->rec->state->errorCount);

  }
  else
  {
    //pANTLR3_BASE_TREE pbt = langAST.tree;

    //std::cout << pbt->toStringTree(pbt)->chars << std::endl;
    pANTLR3_COMMON_TREE_NODE_STREAM nodes = antlr3CommonTreeNodeStreamNewTree(
        langAST.tree,
        ANTLR3_SIZE_HINT); // sIZE HINT WILL SOON BE DEPRECATED!!

    pYAGITreeWalker treePsr;
    treePsr = YAGITreeWalkerNew(nodes);
    treePsr->program(treePsr);

    auto ast = ASTBuilder::getInstance().getAST();

    auto toStringVisitor = std::make_shared<ToStringVisitor>();
    ast->accept(toStringVisitor.get());
  }

}
